#!/usr/bin/env python3
"""
Assign employees to service teams and add skills
"""

import xmlrpc.client
import sys
import random

# Odoo connection parameters
url = 'http://localhost:8069'
db = 'odoo_tech_service'
username = 'admin'
password = 'admin'

# Connect to Odoo
common = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/common')
uid = common.authenticate(db, username, password, {})
models = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/object')

if not uid:
    print("Authentication failed!")
    sys.exit(1)

print(f"‚úÖ Connected to Odoo (Database: {db}, UID: {uid})")

# Get all employees
print("\nüìã Getting employees...")
employees = models.execute_kw(db, uid, password,
    'hr.employee', 'search_read', [[]],
    {'fields': ['id', 'name']})

employee_ids = [emp['id'] for emp in employees if emp['id'] != 1]  # Exclude Administrator
print(f"Found {len(employee_ids)} employees (excluding Administrator)")

# Get all teams
print("\nüìã Getting service teams...")
teams = models.execute_kw(db, uid, password,
    'maintenance.team', 'search_read', [[]],
    {'fields': ['id', 'name']})

# Team assignments with skills
team_configs = [
    {
        'id': 1,  # ƒ∞√ß Bakƒ±m / Internal Maintenance
        'member_count': 4,
        'skills': """üéØ Takƒ±m Yetkinlikleri:
‚Ä¢ Elektrik sistemleri bakƒ±mƒ± ve onarƒ±mƒ±
‚Ä¢ Mekanik sistemler troubleshooting
‚Ä¢ HVAC sistem y√∂netimi ve optimizasyonu
‚Ä¢ Bina otomasyon sistemleri (BMS)
‚Ä¢ Yangƒ±n alarm ve g√ºvenlik sistemleri
‚Ä¢ Jenerat√∂r ve UPS bakƒ±mƒ±
‚Ä¢ Asans√∂r bakƒ±m koordinasyonu
‚Ä¢ Enerji verimliliƒüi projeleri
‚Ä¢ Periyodik bakƒ±m planlama"""
    },
    {
        'id': 2,  # IT Destek Ekibi
        'member_count': 5,
        'skills': """üéØ Takƒ±m Yetkinlikleri:
‚Ä¢ Windows Server ve Linux sistem y√∂netimi
‚Ä¢ Active Directory ve domain y√∂netimi
‚Ä¢ Network yapƒ±landƒ±rma ve troubleshooting
‚Ä¢ Veritabanƒ± y√∂netimi (PostgreSQL, MySQL, MSSQL)
‚Ä¢ Bulut servisleri (AWS, Azure, Google Cloud)
‚Ä¢ Cybersecurity ve firewall y√∂netimi
‚Ä¢ Backup ve disaster recovery planlamasƒ±
‚Ä¢ ERP sistem desteƒüi (Odoo, SAP)
‚Ä¢ Help desk ve kullanƒ±cƒ± desteƒüi
‚Ä¢ Donanƒ±m kurulum ve bakƒ±mƒ±
‚Ä¢ Virtualization (VMware, Hyper-V)
‚Ä¢ Office 365 y√∂netimi"""
    },
    {
        'id': 3,  # Teknik Ekip
        'member_count': 6,
        'skills': """üéØ Takƒ±m Yetkinlikleri:
‚Ä¢ CNC makine programlama ve operasyon
‚Ä¢ PLC programlama (Siemens S7, Allen Bradley)
‚Ä¢ End√ºstriyel robot programlama (ABB, KUKA, Fanuc)
‚Ä¢ SCADA sistem y√∂netimi
‚Ä¢ Hidrolik/Pn√∂matik sistem bakƒ±mƒ±
‚Ä¢ AC/DC motor bakƒ±m ve sarƒ±mƒ±
‚Ä¢ G√º√ß elektroniƒüi ve s√ºr√ºc√º sistemleri
‚Ä¢ Otomasyon panel tasarƒ±mƒ±
‚Ä¢ Kalibrasyon ve metroloji
‚Ä¢ Predictive maintenance teknikleri
‚Ä¢ Vibrasyon analizi
‚Ä¢ Termal g√∂r√ºnt√ºleme"""
    },
    {
        'id': 4,  # Acil M√ºdahale Ekibi
        'member_count': 8,
        'skills': """üéØ Takƒ±m Yetkinlikleri:
‚Ä¢ 7/24 acil m√ºdahale kapasitesi
‚Ä¢ Kriz y√∂netimi ve koordinasyon
‚Ä¢ ƒ∞lk yardƒ±m ve CPR sertifikasƒ±
‚Ä¢ Yangƒ±n s√∂nd√ºrme sistem bilgisi
‚Ä¢ Tehlikeli madde y√∂netimi (HAZMAT)
‚Ä¢ Elektrik kesinti m√ºdahalesi
‚Ä¢ Su baskƒ±nƒ± ve sƒ±zƒ±ntƒ± m√ºdahalesi
‚Ä¢ Doƒüalgaz ka√ßaƒüƒ± m√ºdahalesi
‚Ä¢ G√ºvenlik sistem arƒ±zalarƒ±
‚Ä¢ Acil durum eylem planƒ± uygulama
‚Ä¢ ƒ∞leti≈üim ve raporlama
‚Ä¢ Risk deƒüerlendirmesi"""
    },
    {
        'id': 5,  # Elektrik-Mekanik Ekibi
        'member_count': 5,
        'skills': """üéØ Takƒ±m Yetkinlikleri:
‚Ä¢ Orta gerilim (OG) sistemleri
‚Ä¢ Trafo test ve bakƒ±mƒ±
‚Ä¢ Kompanzasyon sistem optimizasyonu
‚Ä¢ Kesintisiz g√º√ß kaynaklarƒ± (UPS)
‚Ä¢ Chiller ve soƒüutma sistemleri
‚Ä¢ Kompres√∂r ve basƒ±n√ßlƒ± hava sistemleri
‚Ä¢ Pompa, fan ve vana sistemleri
‚Ä¢ Kaynak i≈ülemleri (TIG, MIG, Elektrik ark)
‚Ä¢ Torna, freze ve metal i≈üleme
‚Ä¢ Yalƒ±tƒ±m ve izolasyon kontrolleri
‚Ä¢ Enerji analiz√∂rleri kullanƒ±mƒ±
‚Ä¢ Harmonik filtre sistemleri"""
    },
    {
        'id': 6,  # Network Uzmanlarƒ±
        'member_count': 4,
        'skills': """üéØ Takƒ±m Yetkinlikleri:
‚Ä¢ Cisco network altyapƒ±sƒ± y√∂netimi
‚Ä¢ Firewall yapƒ±landƒ±rma (Fortinet, Palo Alto, Checkpoint)
‚Ä¢ VPN kurulum ve y√∂netimi (Site-to-Site, Client VPN)
‚Ä¢ WiFi altyapƒ±sƒ± tasarƒ±mƒ± ve optimizasyonu
‚Ä¢ Network monitoring (PRTG, Zabbix, Nagios)
‚Ä¢ VLAN ve subnetting yapƒ±landƒ±rma
‚Ä¢ Load balancer ve traffic shaping
‚Ä¢ Network g√ºvenliƒüi ve penetrasyon testleri
‚Ä¢ SD-WAN √ß√∂z√ºmleri
‚Ä¢ BGP, OSPF routing protokolleri
‚Ä¢ QoS yapƒ±landƒ±rma
‚Ä¢ Network dok√ºmantasyonu"""
    },
    {
        'id': 7,  # Bina Bakƒ±m Ekibi
        'member_count': 6,
        'skills': """üéØ Takƒ±m Yetkinlikleri:
‚Ä¢ Sƒ±hhi tesisat bakƒ±m ve onarƒ±mƒ±
‚Ä¢ Su arƒ±tma sistemleri
‚Ä¢ Boya, badana ve duvar kaplama
‚Ä¢ Cam, doƒürama ve cephe bakƒ±mƒ±
‚Ä¢ √áatƒ± ve yalƒ±tƒ±m kontrolleri
‚Ä¢ Peyzaj ve bah√ße bakƒ±mƒ±
‚Ä¢ Temizlik hizmetleri koordinasyonu
‚Ä¢ Atƒ±k y√∂netimi ve geri d√∂n√º≈ü√ºm
‚Ä¢ ƒ∞√ß mekan tasarƒ±m ve d√ºzenleme
‚Ä¢ G√ºvenlik kamera sistemleri
‚Ä¢ Kart ge√ßi≈ü sistemleri
‚Ä¢ Otopark y√∂netimi"""
    }
]

# Shuffle employee IDs for random distribution
random.shuffle(employee_ids)

# Assign employees to teams
employee_index = 0
for team_config in team_configs:
    team_id = team_config['id']
    member_count = min(team_config['member_count'], len(employee_ids) - employee_index)

    if member_count > 0:
        # Get employees for this team
        team_members = employee_ids[employee_index:employee_index + member_count]
        employee_index += member_count

        # Update team with members
        try:
            models.execute_kw(db, uid, password,
                'maintenance.team', 'write',
                [[team_id], {'member_ids': [(6, 0, team_members)]}])

            # Get team name for display
            team = models.execute_kw(db, uid, password,
                'maintenance.team', 'read', [team_id], {'fields': ['name']})[0]

            print(f"\n‚úÖ Team {team_id} updated:")
            print(f"   - Assigned {member_count} members")

            # Get member names for display
            assigned_members = models.execute_kw(db, uid, password,
                'hr.employee', 'read', [team_members], {'fields': ['name']})
            for member in assigned_members:
                print(f"     ‚Ä¢ {member['name']}")

        except Exception as e:
            print(f"\n‚ùå Error updating team {team_id}: {str(e)}")

# Add skills to teams using direct SQL for x_skills field
import psycopg2

print("\nüìù Adding skills to teams...")
try:
    conn = psycopg2.connect(
        host="localhost",
        database="odoo_tech_service",
        user="odoo_dev",
        password="odoo_dev"
    )
    cur = conn.cursor()

    for team_config in team_configs:
        # First check if x_skills column exists
        cur.execute("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = 'maintenance_team'
            AND column_name = 'x_skills'
        """)

        if not cur.fetchone():
            # Add x_skills column if it doesn't exist
            cur.execute("""
                ALTER TABLE maintenance_team
                ADD COLUMN IF NOT EXISTS x_skills TEXT
            """)
            conn.commit()

        # Update team with skills
        cur.execute("""
            UPDATE maintenance_team
            SET x_skills = %s
            WHERE id = %s
        """, (team_config['skills'], team_config['id']))

    conn.commit()
    print("‚úÖ Skills added to all teams")

    # Show final summary
    cur.execute("""
        SELECT t.id, t.name,
               COUNT(DISTINCT mtm.hr_employee_id) as member_count,
               CASE WHEN t.x_skills IS NOT NULL THEN 'Yes' ELSE 'No' END as has_skills
        FROM maintenance_team t
        LEFT JOIN maintenance_team_hr_employee_rel mtm ON t.id = mtm.maintenance_team_id
        GROUP BY t.id, t.name, t.x_skills
        ORDER BY t.id
    """)

    print("\nüìä Final Team Summary:")
    print("-" * 60)
    for row in cur.fetchall():
        team_name = row[1]
        if isinstance(team_name, dict):
            team_name = team_name.get('en_US', str(team_name))
        print(f"Team {row[0]}: {team_name}")
        print(f"  - Members: {row[2]}")
        print(f"  - Skills defined: {row[3]}")

    cur.close()
    conn.close()

except Exception as e:
    print(f"‚ùå Database error: {str(e)}")

print("\n‚úÖ Team assignment complete!")